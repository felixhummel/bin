#!/usr/bin/env python
# encoding: utf-8
import logging
import os

import click
import dbus

logging.basicConfig(level=os.environ.get('LOGLEVEL', 'INFO').upper())
log = logging.getLogger('music')


try:
    from dbus import DBusException
except ImportError:
    from dbus.exceptions import DBusException


bus = dbus.SessionBus()


class Player:
    def __init__(self, name):
        self.name = name
        log.debug(f'Player(name="{self.name}")')
        self.proxy = bus.get_object(name, '/org/mpris/MediaPlayer2')
        self.interface = dbus.Interface(self.proxy, dbus_interface='org.mpris.MediaPlayer2.Player')

    def call_method(self, method_name):
        method = self.interface.get_dbus_method(method_name)
        return method()

    def can_pause(self) -> bool:
        # qdbus org.mpris.MediaPlayer2.parole /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.CanPause
        return self.interface.CanPause


def get_players():
    # qdbus | rg org.mpris.MediaPlayer2
    names = [n for n in bus.list_names() if n.startswith('org.mpris.MediaPlayer2')]
    return [Player(n) for n in names]


def get_current_player():
    players = get_players()
    for player in players:
        if player.can_pause():
            log.info(f'found player that can pause: {player.name}')
            return player
    log.info(f'returning first player found: {player.name}')
    return players[0]


@click.command()
@click.argument('what', type=click.Choice(['PlayPause', 'Previous', 'Next']))
def main(what):
    player = get_current_player()
    player.call_method(what)


if __name__ == '__main__':
    main()
