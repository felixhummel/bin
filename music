#!/usr/bin/env python
# encoding: utf-8
# sudo apt-get -y install build-essential libdbus-1-dev cmake
# pip install -U dbus-python click
import logging
import os
import re
from typing import List

import click
import dbus

logging.basicConfig(level=os.environ.get('LOGLEVEL', 'warning').upper())
log = logging.getLogger('music')


try:
    from dbus import DBusException
except ImportError:
    from dbus.exceptions import DBusException


RE_NAME = re.compile(r'org\.mpris\.MediaPlayer2\.(.+)\.instance\d+')

bus = dbus.SessionBus()


class Player:
    MUSIC_PLAYERS = ['mpv', 'vlc']
    def __init__(self, bus_name):
        self.bus_name = bus_name
        self.name = RE_NAME.match(bus_name).group(1)
        self.proxy = bus.get_object(bus_name, '/org/mpris/MediaPlayer2')
        self.interface = dbus.Interface(self.proxy, dbus_interface='org.mpris.MediaPlayer2.Player')

    def call_method(self, method_name):
        method = self.interface.get_dbus_method(method_name)
        return method()

    def can_pause(self) -> bool:
        # qdbus org.mpris.MediaPlayer2.parole /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.CanPause
        return self.interface.CanPause

    def is_music_player(self) -> bool:
        return any([key in self.name for key in self.MUSIC_PLAYERS])

    def __repr__(self):
        return f'Player(name="{self.name}")'

    def __str__(self):
        return self.name


def get_players():
    # qdbus | rg org.mpris.MediaPlayer2
    for n in bus.list_names():
        if n.startswith('org.mpris.MediaPlayer2'):
            p = Player(n)
            log.info(f'found player {p}')
            yield p


def get_best_player():
    players = get_players()
    scored = {}  # on identical scores: last one wins (yagni)
    for player in players:
        score = 0
        if player.can_pause():
            score += 3
        if player.is_music_player():
            score += 2
        if 'firefox' in player.name:  # prefer firefox
            score += 1
        log.debug(f'score({player}) = {score}')
        scored[score] = player
    highscore = next(reversed(sorted(scored)))
    winner = scored[highscore]
    log.debug(f'winner = {winner}')
    return winner


@click.command()
@click.argument('what', type=click.Choice(['PlayPause', 'Previous', 'Next']))
def main(what):
    player = get_best_player()
    player.call_method(what)


if __name__ == '__main__':
    main()
