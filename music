#!/usr/bin/env python
# encoding: utf-8
# sudo apt-get -y install build-essential libdbus-1-dev cmake
# pip install -U dbus-python click
import logging
import os

import click
import dbus

logging.basicConfig(level=os.environ.get('LOGLEVEL', 'warning').upper())
log = logging.getLogger('music')


try:
    from dbus import DBusException
except ImportError:
    from dbus.exceptions import DBusException


bus = dbus.SessionBus()


class Player:
    MUSIC_PLAYERS = ['mpv', 'vlc']
    def __init__(self, name):
        self.name = name
        self.proxy = bus.get_object(name, '/org/mpris/MediaPlayer2')
        self.interface = dbus.Interface(self.proxy, dbus_interface='org.mpris.MediaPlayer2.Player')
        self.score = self._score()
        log.info(f'Player name="{self.name}" score={self.score}')

    def call_method(self, method_name):
        method = self.interface.get_dbus_method(method_name)
        return method()

    def can_pause(self) -> bool:
        # qdbus org.mpris.MediaPlayer2.parole /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.CanPause
        return self.interface.CanPause

    def is_music_player(self) -> bool:
        return any([key in self.name for key in self.MUSIC_PLAYERS])

    def _score(self):
        result = 0
        if self.can_pause():
            result += 1
        if self.is_music_player():
            result += 1
        return result


def get_players():
    # qdbus | rg org.mpris.MediaPlayer2
    names = [n for n in bus.list_names() if n.startswith('org.mpris.MediaPlayer2')]
    return [Player(n) for n in names]


def get_best_player():
    players = get_players()
    scored = {}  # on identical scores: last one wins (yagni)
    for p in players:
        scored[p.score] = p
    highscore = next(reversed(sorted(scored)))
    return scored[highscore]


@click.command()
@click.argument('what', type=click.Choice(['PlayPause', 'Previous', 'Next']))
def main(what):
    player = get_best_player()
    player.call_method(what)


if __name__ == '__main__':
    main()
