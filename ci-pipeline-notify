#!/bin/bash
set -euo pipefail

PIPELINE_URL="$1"
CHECK_INTERVAL_S=10

if [ -z "$PIPELINE_URL" ]; then
  cat <<EOF >&2
Usage: $0 PIPELINE_URL
Example: $0 https://git.example.com/my/project/-/pipelines/1234

Note that we assume that the python gitlab profile is named after the domain,
e.g. git.example.com.
EOF
  exit 1
fi

# best URL parser ever :>
IFS=/ read -r _ _ gitlab ns n _ _ pipeline_id <<< "$PIPELINE_URL"

project_id=$ns/$n

get_pipeline() {
  gitlab -g "$gitlab" -o json project-pipeline get --project-id "$project_id" --id "$pipeline_id"
}

while true; do
  status=$(get_pipeline | jq -r .status)

  # Check for errors during status retrieval
  if [[ -z "$status" ]]; then
    notify-send "ERROR" "Failed to retrieve pipeline status. Check your GitLab connection and project/pipeline IDs."
    echo "Error: Failed to retrieve pipeline status. Check your GitLab connection and project/pipeline IDs."
    exit 1
  fi
  case "$status" in
    success)
      break
      ;;
    failed)
      break
      ;;
    canceled)
      break
      ;;
    skipped)
      break
      ;;
    manual)
      break
      ;;
    *)
      echo "Pipeline status: $status. Continuing to monitor..." >&2
      ;;
  esac

  sleep $CHECK_INTERVAL_S
done

result=$(notify-send --action 'open_url=Open URL' "$status" "$PIPELINE_URL")
if [[ "$result" == open_url ]]; then
  xdg-open "$PIPELINE_URL"
fi
